// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	gocron "github.com/go-co-op/gocron/v2"
	mock "github.com/stretchr/testify/mock"
)

// ICronService is an autogenerated mock type for the ICronService type
type ICronService struct {
	mock.Mock
}

// Init provides a mock function with given fields:
func (_m *ICronService) Init() (gocron.Scheduler, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 gocron.Scheduler
	var r1 error
	if rf, ok := ret.Get(0).(func() (gocron.Scheduler, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() gocron.Scheduler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gocron.Scheduler)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICronService creates a new instance of ICronService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICronService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICronService {
	mock := &ICronService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
