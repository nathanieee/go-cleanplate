// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	utfile "project-skbackend/packages/utils/utfile"

	uuid "github.com/google/uuid"
)

// IFileService is an autogenerated mock type for the IFileService type
type IFileService struct {
	mock.Mock
}

// Upload provides a mock function with given fields: req
func (_m *IFileService) Upload(req utfile.FileMultipart) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(utfile.FileMultipart) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(utfile.FileMultipart) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(utfile.FileMultipart) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadProfilePicture provides a mock function with given fields: uid, fileheader
func (_m *IFileService) UploadProfilePicture(uid uuid.UUID, fileheader *multipart.FileHeader) error {
	ret := _m.Called(uid, fileheader)

	if len(ret) == 0 {
		panic("no return value specified for UploadProfilePicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *multipart.FileHeader) error); ok {
		r0 = rf(uid, fileheader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIFileService creates a new instance of IFileService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFileService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFileService {
	mock := &IFileService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
