// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	models "project-skbackend/internal/models"

	requests "project-skbackend/internal/controllers/requests"

	responses "project-skbackend/internal/controllers/responses"

	uttoken "project-skbackend/packages/utils/uttoken"

	uuid "github.com/google/uuid"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: req
func (_m *IAuthService) ForgotPassword(req requests.ForgotPassword) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(requests.ForgotPassword) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshAuthToken provides a mock function with given fields: trefresh, ctx
func (_m *IAuthService) RefreshAuthToken(trefresh string, ctx *gin.Context) (*responses.User, *uttoken.TokenHeader, error) {
	ret := _m.Called(trefresh, ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAuthToken")
	}

	var r0 *responses.User
	var r1 *uttoken.TokenHeader
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *gin.Context) (*responses.User, *uttoken.TokenHeader, error)); ok {
		return rf(trefresh, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, *gin.Context) *responses.User); ok {
		r0 = rf(trefresh, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *gin.Context) *uttoken.TokenHeader); ok {
		r1 = rf(trefresh, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uttoken.TokenHeader)
		}
	}

	if rf, ok := ret.Get(2).(func(string, *gin.Context) error); ok {
		r2 = rf(trefresh, ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResetPassword provides a mock function with given fields: req
func (_m *IAuthService) ResetPassword(req requests.ResetPassword) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(requests.ResetPassword) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendResetPasswordEmail provides a mock function with given fields: user
func (_m *IAuthService) SendResetPasswordEmail(user models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SendResetPasswordEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendVerificationEmail provides a mock function with given fields: id
func (_m *IAuthService) SendVerificationEmail(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signin provides a mock function with given fields: req, ctx
func (_m *IAuthService) Signin(req requests.Signin, ctx *gin.Context) (*responses.User, *uttoken.TokenHeader, error) {
	ret := _m.Called(req, ctx)

	if len(ret) == 0 {
		panic("no return value specified for Signin")
	}

	var r0 *responses.User
	var r1 *uttoken.TokenHeader
	var r2 error
	if rf, ok := ret.Get(0).(func(requests.Signin, *gin.Context) (*responses.User, *uttoken.TokenHeader, error)); ok {
		return rf(req, ctx)
	}
	if rf, ok := ret.Get(0).(func(requests.Signin, *gin.Context) *responses.User); ok {
		r0 = rf(req, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.User)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.Signin, *gin.Context) *uttoken.TokenHeader); ok {
		r1 = rf(req, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uttoken.TokenHeader)
		}
	}

	if rf, ok := ret.Get(2).(func(requests.Signin, *gin.Context) error); ok {
		r2 = rf(req, ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VerifyToken provides a mock function with given fields: req, ctx
func (_m *IAuthService) VerifyToken(req requests.VerifyToken, ctx *gin.Context) (*responses.User, *uttoken.TokenHeader, error) {
	ret := _m.Called(req, ctx)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *responses.User
	var r1 *uttoken.TokenHeader
	var r2 error
	if rf, ok := ret.Get(0).(func(requests.VerifyToken, *gin.Context) (*responses.User, *uttoken.TokenHeader, error)); ok {
		return rf(req, ctx)
	}
	if rf, ok := ret.Get(0).(func(requests.VerifyToken, *gin.Context) *responses.User); ok {
		r0 = rf(req, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.User)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.VerifyToken, *gin.Context) *uttoken.TokenHeader); ok {
		r1 = rf(req, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*uttoken.TokenHeader)
		}
	}

	if rf, ok := ret.Get(2).(func(requests.VerifyToken, *gin.Context) error); ok {
		r2 = rf(req, ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
