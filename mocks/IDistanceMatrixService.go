// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	exrequests "project-skbackend/external/controllers/exrequests"
	exresponses "project-skbackend/external/controllers/exresponses"

	mock "github.com/stretchr/testify/mock"
)

// IDistanceMatrixService is an autogenerated mock type for the IDistanceMatrixService type
type IDistanceMatrixService struct {
	mock.Mock
}

// GetDistanceMatrix provides a mock function with given fields: dismat
func (_m *IDistanceMatrixService) GetDistanceMatrix(dismat exrequests.DistanceMatrix) (*exresponses.DistanceMatrix, error) {
	ret := _m.Called(dismat)

	if len(ret) == 0 {
		panic("no return value specified for GetDistanceMatrix")
	}

	var r0 *exresponses.DistanceMatrix
	var r1 error
	if rf, ok := ret.Get(0).(func(exrequests.DistanceMatrix) (*exresponses.DistanceMatrix, error)); ok {
		return rf(dismat)
	}
	if rf, ok := ret.Get(0).(func(exrequests.DistanceMatrix) *exresponses.DistanceMatrix); ok {
		r0 = rf(dismat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exresponses.DistanceMatrix)
		}
	}

	if rf, ok := ret.Get(1).(func(exrequests.DistanceMatrix) error); ok {
		r1 = rf(dismat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGeocoding provides a mock function with given fields: loc
func (_m *IDistanceMatrixService) GetGeocoding(loc exrequests.Geolocation) (*exresponses.Geocode, error) {
	ret := _m.Called(loc)

	if len(ret) == 0 {
		panic("no return value specified for GetGeocoding")
	}

	var r0 *exresponses.Geocode
	var r1 error
	if rf, ok := ret.Get(0).(func(exrequests.Geolocation) (*exresponses.Geocode, error)); ok {
		return rf(loc)
	}
	if rf, ok := ret.Get(0).(func(exrequests.Geolocation) *exresponses.Geocode); ok {
		r0 = rf(loc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exresponses.Geocode)
		}
	}

	if rf, ok := ret.Get(1).(func(exrequests.Geolocation) error); ok {
		r1 = rf(loc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIDistanceMatrixService creates a new instance of IDistanceMatrixService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDistanceMatrixService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDistanceMatrixService {
	mock := &IDistanceMatrixService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
