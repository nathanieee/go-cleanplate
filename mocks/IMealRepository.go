// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "project-skbackend/internal/models"

	mock "github.com/stretchr/testify/mock"

	utpagination "project-skbackend/packages/utils/utpagination"

	uuid "github.com/google/uuid"
)

// IMealRepository is an autogenerated mock type for the IMealRepository type
type IMealRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: m
func (_m *IMealRepository) Create(m models.Meal) (*models.Meal, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Meal) (*models.Meal, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(models.Meal) *models.Meal); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Meal) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: m
func (_m *IMealRepository) Delete(m models.Meal) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Meal) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: p
func (_m *IMealRepository) FindAll(p utpagination.Pagination) (*utpagination.Pagination, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 *utpagination.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(utpagination.Pagination) (*utpagination.Pagination, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(utpagination.Pagination) *utpagination.Pagination); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utpagination.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(utpagination.Pagination) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPartnerID provides a mock function with given fields: pid
func (_m *IMealRepository) FindByPartnerID(pid uuid.UUID) ([]models.Meal, error) {
	ret := _m.Called(pid)

	if len(ret) == 0 {
		panic("no return value specified for FindByPartnerID")
	}

	var r0 []models.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]models.Meal, error)); ok {
		return rf(pid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []models.Meal); ok {
		r0 = rf(pid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(pid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *IMealRepository) GetByID(id uuid.UUID) (*models.Meal, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.Meal, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Meal); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields:
func (_m *IMealRepository) Read() ([]*models.Meal, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []*models.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Meal, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Meal); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: m
func (_m *IMealRepository) Update(m models.Meal) (*models.Meal, error) {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Meal
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Meal) (*models.Meal, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(models.Meal) *models.Meal); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Meal)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Meal) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMealRepository creates a new instance of IMealRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMealRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMealRepository {
	mock := &IMealRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
