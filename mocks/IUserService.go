// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	requests "project-skbackend/internal/controllers/requests"
	responses "project-skbackend/internal/controllers/responses"

	mock "github.com/stretchr/testify/mock"

	utpagination "project-skbackend/packages/utils/utpagination"

	uuid "github.com/google/uuid"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *IUserService) Create(req requests.CreateUser) (*responses.User, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *responses.User
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.CreateUser) (*responses.User, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(requests.CreateUser) *responses.User); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.User)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.CreateUser) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: uid
func (_m *IUserService) Delete(uid uuid.UUID) error {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: p
func (_m *IUserService) FindAll(p utpagination.Pagination) (*utpagination.Pagination, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 *utpagination.Pagination
	var r1 error
	if rf, ok := ret.Get(0).(func(utpagination.Pagination) (*utpagination.Pagination, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(utpagination.Pagination) *utpagination.Pagination); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utpagination.Pagination)
		}
	}

	if rf, ok := ret.Get(1).(func(utpagination.Pagination) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: uid
func (_m *IUserService) FindByID(uid uuid.UUID) (*responses.User, error) {
	ret := _m.Called(uid)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *responses.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*responses.User, error)); ok {
		return rf(uid)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *responses.User); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: req, uid
func (_m *IUserService) Update(req requests.UpdateUser, uid uuid.UUID) (*responses.User, error) {
	ret := _m.Called(req, uid)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *responses.User
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.UpdateUser, uuid.UUID) (*responses.User, error)); ok {
		return rf(req, uid)
	}
	if rf, ok := ret.Get(0).(func(requests.UpdateUser, uuid.UUID) *responses.User); ok {
		r0 = rf(req, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*responses.User)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.UpdateUser, uuid.UUID) error); ok {
		r1 = rf(req, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
